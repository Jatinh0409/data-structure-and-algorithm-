class Solution {
public:
    ListNode* deleteMiddle(ListNode* head) {
       if (   head == nullptr ||head -> next == nullptr){
        return nullptr;
       }
        
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = nullptr; //as the slow -> next = slow -> next -> next will give runtime error because slow -> next might be null sometime 
      //which will crash the slow -> next -> next to avoid this we have created a prev which direct to slow and we will us e pre -> next = slow -> next
        while ( fast != nullptr && fast -> next != nullptr){\
        prev = slow;
            slow = slow -> next;
            fast = fast -> next -> next;   
        }
        prev -> next = slow -> next;
        return head;
    }
  
};
